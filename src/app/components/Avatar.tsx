/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/model/Avatar.glb -o src/app/components/Avatar.tsx -r public 
*/

import * as THREE from 'three'
import React, { JSX, useEffect, useRef, useState } from 'react'
import { useGraph } from '@react-three/fiber'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Wolf3D_Hair: THREE.SkinnedMesh
    Wolf3D_Outfit_Top: THREE.SkinnedMesh
    Wolf3D_Outfit_Bottom: THREE.SkinnedMesh
    Wolf3D_Outfit_Footwear: THREE.SkinnedMesh
    Wolf3D_Body: THREE.SkinnedMesh
    EyeLeft: THREE.SkinnedMesh
    EyeRight: THREE.SkinnedMesh
    Wolf3D_Head: THREE.SkinnedMesh
    Wolf3D_Teeth: THREE.SkinnedMesh
    Hips: THREE.Bone
  }
  materials: {
    Wolf3D_Hair: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Top: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Bottom: THREE.MeshStandardMaterial
    Wolf3D_Outfit_Footwear: THREE.MeshStandardMaterial
    Wolf3D_Body: THREE.MeshStandardMaterial
    Wolf3D_Eye: THREE.MeshStandardMaterial
    Wolf3D_Skin: THREE.MeshStandardMaterial
    Wolf3D_Teeth: THREE.MeshStandardMaterial
  }
  // animations: GLTFAction[] // Removed because GLTFAction is not defined and animations are not used
}

const AvatarComponent = (props: JSX.IntrinsicElements['group']) => {
  const { scene } = useGLTF('/model/Avatar.glb')
  const {animations: saluteAnimation} = useFBX("/animations/Salute.fbx")
  const {animations: dancingAnimation} = useFBX("/animations/Silly Dancing.fbx")
  const {animations: breathingAnimation} = useFBX("/animations/Breathing Idle.fbx")
  const {animations: sadAnimation} = useFBX("/animations/Sad Idle.fbx")

  // Pastikan animasi ada sebelum set nama
  if (saluteAnimation[0]) saluteAnimation[0].name = "Salute"
  if (dancingAnimation[0]) dancingAnimation[0].name = "Silly Dancing"
  if (breathingAnimation[0]) breathingAnimation[0].name = "Breathing Idle"
  if (sadAnimation[0]) sadAnimation[0].name = "Sad Idle"

  // List animasi selain "Breathing Idle"
  const animationsList = [
    saluteAnimation[0]?.name,
    dancingAnimation[0]?.name,
    sadAnimation[0]?.name
  ].filter(Boolean) as string[];

  const [animation, setAnimation] = useState('Breathing Idle');
  const [isBreathing, setIsBreathing] = useState(true);

  const group = useRef<THREE.Group>(null);
  const {actions} = useAnimations([
    saluteAnimation[0],
    dancingAnimation[0],
    breathingAnimation[0],
    sadAnimation[0]
  ].filter(Boolean), group);

  useEffect(() => {
    actions[animation]?.fadeIn(0.1).play();
    return () => {
      actions[animation]?.fadeOut(0.1);
    };
  }, [animation, actions]);

useEffect(() => {
  if (animationsList.length === 0) return;
  let timeout: NodeJS.Timeout | null = null;
  let nextAnim = "Breathing Idle";

  const switchAnimation = () => {
    const current = nextAnim;
    if (current === "Breathing Idle") {
      nextAnim = animationsList[Math.floor(Math.random() * animationsList.length)];
    } else {
      nextAnim = "Breathing Idle";
    }
    // Fade out current, fade in next
    actions[current]?.fadeOut(0.5);
    setTimeout(() => {
      setAnimation(nextAnim);
      actions[nextAnim]?.fadeIn(0.5).play();
    }, 500); // 0.5s fade out, lalu ganti animasi
    timeout = setTimeout(switchAnimation, 10000); // Ganti animasi setiap 10 detik
  };

  timeout = setTimeout(switchAnimation, 10000);
  return () => {
    if (timeout) clearTimeout(timeout);
  };
}, [animationsList.join(","), actions]);

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone as THREE.Object3D) as unknown as GLTFResult
  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} castShadow={false} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} castShadow={false} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} castShadow={false} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} castShadow={false} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} castShadow={false} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} castShadow={false} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} castShadow={false} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} castShadow={false} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} castShadow={false} />
    </group>
  )
}

export const Avatar = React.memo(AvatarComponent);
useGLTF.preload('/model/Avatar.glb')
